특정 폴더의 파일들을 특정 패스로 접근할 수 있도록 만들어줌
public 폴더에 있는 모든 파일을 웹서버의 루트 패스로 접근할 수 있도록 하려면

app.use('/public', static(path.join(__dirname, 'public')));

app.use('요청 경로', express.static('실제 경로'));

app.use('/',express.static(path.join(__dirname, 'public')));

지정한 폴더에 있는 내용을 모두 웹 서버 루트 폴더에 올림

요청하는 파일이 없으면 알아서 next를 호출해 다음 미드루에어로 넘어감

파일을 발견했다면 다음 미들웨어는 실행되지 않음
서버의 구조를 파악하기 어려워져서 보안에 도움이 됨
요청 주소 localhost:3000/stylesheets/style.css
실제 컨텐츠 경로 /public/stylesheets/style.css


body-parser
post로 요청시 요청 파라미터를 확인할 수 있도록 만들어 주는 미들웨어
post로 요청시 본문에 들어있는 요청 파라미터들을 파싱하여 요청 객체의 body속성에 넣어줌
폼 데이터나 AJAX 요청의 데이터 처리함
json미들웨어는 요청 본문이 json인 경우 해석.urlencoded미들웨어는 폼 요청 해석
put이나 patch.post요청 시에 req.body에 프린트에서 온 데이터를 넣어줌

app.use(express.json());
app.use(express.urlencoded({ extended: flase}));

http 모듈로만 post body를 파싱하려면, req.on('data', function(chunk) {body += chunk;}); 
와 같이 이벤트를 등록 후 인코딩 처리를 해줘야함
body-parser 사용시
bodyParser.urlencoded()를 등록하면, 자동으로 req에 body속성이 추가되고 저장됨
만약 urls에 접근하고 싶다면, req.body.urls이다.
인코딩도 default로 utf8로 해주고, 이벤트 등록할 필요도 없음

urlencoded()의 옵션
extended는 중첩된 객체표현을 허용할지 말지를 정하는 것
urlencoded는 url 형식의 데이터 전달을 의미
객체 안의 객체를 파싱할 수 있게 하려면 true
true이면 qs모듈을 사용
false이면 기본 내장된 querystring 모듈을 사용
querystring.parse는 object를 상속받지 않음
{extended: true}를 하면 qs.parse를 사용하므로, 중첩 객체 파싱 가능